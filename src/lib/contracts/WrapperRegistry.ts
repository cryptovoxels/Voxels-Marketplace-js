/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WrapperRegistryInterface extends utils.Interface {
  functions: {
    "fromAddress(address)": FunctionFragment;
    "fromImplementationAddress(address)": FunctionFragment;
    "fromName(string)": FunctionFragment;
    "getWrapper(uint256)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "isWrapped(address)": FunctionFragment;
    "name()": FunctionFragment;
    "paused()": FunctionFragment;
    "register(address,address,string)": FunctionFragment;
    "togglePause()": FunctionFragment;
    "unregister(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fromAddress"
      | "fromImplementationAddress"
      | "fromName"
      | "getWrapper"
      | "isRegistered"
      | "isWrapped"
      | "name"
      | "paused"
      | "register"
      | "togglePause"
      | "unregister"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fromAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fromImplementationAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fromName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrapper",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWrapped",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "togglePause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregister",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "fromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromImplementationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fromName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWrapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWrapped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "togglePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unregister", data: BytesLike): Result;

  events: {
    "Paused(address)": EventFragment;
    "Registered(uint256,address,address,string)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Unregistered(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unregistered"): EventFragment;
}

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RegisteredEventObject {
  id: BigNumber;
  implementation_: string;
  wrapper: string;
  name: string;
}
export type RegisteredEvent = TypedEvent<
  [BigNumber, string, string, string],
  RegisteredEventObject
>;

export type RegisteredEventFilter = TypedEventFilter<RegisteredEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnregisteredEventObject {
  id: BigNumber;
  name: string;
}
export type UnregisteredEvent = TypedEvent<
  [BigNumber, string],
  UnregisteredEventObject
>;

export type UnregisteredEventFilter = TypedEventFilter<UnregisteredEvent>;

export interface WrapperRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WrapperRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fromAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        id_: BigNumber;
        implementation_: string;
        wrapper_: string;
        name_: string;
      }
    >;

    fromImplementationAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        id_: BigNumber;
        implementation_: string;
        wrapper_: string;
        name_: string;
      }
    >;

    fromName(
      name__: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        id_: BigNumber;
        implementation_: string;
        wrapper_: string;
        name_: string;
      }
    >;

    getWrapper(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        implementation: string;
        wrapper: string;
        name_: string;
      }
    >;

    isRegistered(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWrapped(
      _impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isWrapped: boolean }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    register(
      implementation_: PromiseOrValue<string>,
      wrapper_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    togglePause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregister(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fromAddress(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      id_: BigNumber;
      implementation_: string;
      wrapper_: string;
      name_: string;
    }
  >;

  fromImplementationAddress(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      id_: BigNumber;
      implementation_: string;
      wrapper_: string;
      name_: string;
    }
  >;

  fromName(
    name__: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      id_: BigNumber;
      implementation_: string;
      wrapper_: string;
      name_: string;
    }
  >;

  getWrapper(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      implementation: string;
      wrapper: string;
      name_: string;
    }
  >;

  isRegistered(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWrapped(
    _impl: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  register(
    implementation_: PromiseOrValue<string>,
    wrapper_: PromiseOrValue<string>,
    name_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  togglePause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregister(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fromAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        id_: BigNumber;
        implementation_: string;
        wrapper_: string;
        name_: string;
      }
    >;

    fromImplementationAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        id_: BigNumber;
        implementation_: string;
        wrapper_: string;
        name_: string;
      }
    >;

    fromName(
      name__: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        id_: BigNumber;
        implementation_: string;
        wrapper_: string;
        name_: string;
      }
    >;

    getWrapper(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        implementation: string;
        wrapper: string;
        name_: string;
      }
    >;

    isRegistered(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWrapped(
      _impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    register(
      implementation_: PromiseOrValue<string>,
      wrapper_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    togglePause(overrides?: CallOverrides): Promise<void>;

    unregister(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Registered(uint256,address,address,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      implementation_?: PromiseOrValue<string> | null,
      wrapper?: PromiseOrValue<string> | null,
      name?: null
    ): RegisteredEventFilter;
    Registered(
      id?: PromiseOrValue<BigNumberish> | null,
      implementation_?: PromiseOrValue<string> | null,
      wrapper?: PromiseOrValue<string> | null,
      name?: null
    ): RegisteredEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Unregistered(uint256,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      name?: null
    ): UnregisteredEventFilter;
    Unregistered(
      id?: PromiseOrValue<BigNumberish> | null,
      name?: null
    ): UnregisteredEventFilter;
  };

  estimateGas: {
    fromAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromImplementationAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromName(
      name__: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWrapper(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWrapped(
      _impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      implementation_: PromiseOrValue<string>,
      wrapper_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    togglePause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregister(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fromAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromImplementationAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromName(
      name__: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWrapper(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWrapped(
      _impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      implementation_: PromiseOrValue<string>,
      wrapper_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    togglePause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregister(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
